# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Announcement {
    _id: ID!
    congregation: Congregation!
    createdAt: DateTime!
    markdown: String!
    updatedAt: DateTime!
}

type Congregation {
    _id: ID!
    catechist: String!
    district: District!
    location: String!
    name: String!
    phone: String!
    residentPastor: String!
}

type Contact {
    email: String
    nextOfKin: NextOfKin
    primaryTelephone: String
    secondaryTelephone: String
}

type District {
    _id: ID!
    name: String!
    presbytery: Presbytery!
}

type LoginMemberOutput {
    message: String!
    success: Boolean!
}

type Member {
    _id: ID!
    address: String
    communicant: Boolean
    congregation: Congregation
    contact: Contact
    dateJoined: DateTime
    firstName: String
    folio: String
    gender: Gender
    group: String
    hometown: String
    imageURL: String
    maritalStatus: MaritalStatus
    middleName: String
    reasonForJoining: String
    surname: String
}

type MobileToken {
    createdAt: DateTime!
    member: Member
    mobileToken: String!
    updatedAt: DateTime!
}

type Mutation {
    addCongregation(input: addCongregationInput): Congregation
    addDistrict(input: addDistrictInput): District
    addMember(input: addMemberInput): Member!
    addPresbytery(input: addPresbyteryInput): Presbytery
    completePrayerRequest(prayerRequest: ID!): PrayerRequest!
    editMember(input: addMemberInput): Member!
    loginMember(input: loginMemberInput): LoginMemberOutput!
    makeAnnouncement(pagination: pagination): Announcement!
    makePrayerRequest(input: makePrayerRequestInput): PrayerRequest!
    root: String
    setMemberCongregation(input: setCongregationInput): Member!
    validateLoginMember(input: validateLoginMemberInput): MobileToken!
}

type NextOfKin {
    name: String
    telephone: String
}

type PrayerRequest {
    _id: ID!
    anonymous: Boolean!
    createdAt: DateTime!
    member: Member
    request: String!
    status: prayerRequestStatus!
    updatedAt: DateTime!
}

type Presbytery {
    _id: ID!
    id: ID!
    name: String!
    zone: String!
}

type Query {
    announcements: [Announcement]!
    congregations(filter: congregationFilter): [Congregation]!
    districts(filter: districtFilter): [District]!
    memberPrayerRequests: [PrayerRequest]!
    memberProfile: Member!
    members(filter: getMemberFilter, pagination: pagination): [Member]!
    prayerRequests(filter: prayerRequestFilter, pagination: pagination): [PrayerRequest]!
    presbyteries(filter: presbyteryFilter): [Presbytery]!
    root: String
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum Gender {
    female
    male
}

enum MaritalStatus {
    divorced
    married
    single
}

enum prayerRequestStatus {
    completed
    pending
}

input addCongregationInput {
    catechist: String!
    district: ID!
    location: String!
    name: String!
    phone: String!
    residentPastor: String!
}

input addDistrictInput {
    name: String!
    presbytery: ID!
}

"Fields for adding a new member"
input addMemberInput {
    address: String!
    communicant: Boolean!
    contact: memberContactInput
    dateJoined: DateTime
    email: EmailAddress
    firstName: String!
    folio: String
    gender: Gender!
    group: String!
    hometown: String!
    image: Upload
    maritalStatus: MaritalStatus!
    middleName: String
    reasonForJoining: String
    surname: String!
}

input addPresbyteryInput {
    id: ID!
    name: String!
    zone: String!
}

input congregationFilter {
    catechist: String
    district: ID
    location: String
    name: String
    phone: String
    residentPastor: String
}

input districtFilter {
    name: String
    presbytery: ID
}

input editMemberInput {
    address: String
    communicant: Boolean
    contact: memberContactInput
    email: EmailAddress
    firstName: String
    folio: String
    gender: Gender
    group: String
    hometown: String
    maritalStatus: MaritalStatus
    middleName: String
    surname: String
}

input emergencyContactInput {
    email: EmailAddress
    name: String
    telephone: String
}

input getMemberFilter {
    _id: ID
    address: String
    communicant: Boolean
    contact: memberContactFilter
    firstName: String
    folio: String
    gender: Gender
    group: String
    hometown: String
    maritalStatus: MaritalStatus
    middleName: String
    surname: String
}

input loginMemberInput {
    phone: String!
}

input makeAnnouncementInput {
    markdown: String!
}

input makePrayerRequestInput {
    anonymous: Boolean!
    request: String!
}

input memberContactFilter {
    email: String
    primaryTelephone: String
    secondaryTelephone: String
}

input memberContactInput {
    email: String
    emergencyContact: emergencyContactInput
    nextOfKin: nextOfKinInput
    primaryTelephone: String
    secondaryTelephone: String
}

input nextOfKinFilter {
    name: String
    telephone: String
}

input nextOfKinInput {
    email: EmailAddress
    name: String
    telephone: String
}

"""
Pagination takes first which takes number of data to return
and after which takes ID of data to return after it. Default value pagination returns is
10
"""
input pagination {
    after: ID
    first: Int
}

input prayerRequestFilter {
    _id: ID
    anonymous: Boolean
    createdAt: DateTime
    member: String
    request: String
    status: prayerRequestStatus
    updatedAt: DateTime
}

input presbyteryFilter {
    id: ID
    name: String
    zone: String
}

input setCongregationInput {
    congregation: ID!
}

input validateLoginMemberInput {
    otp: String!
    phone: String!
}


scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload

scalar EmailAddress

scalar Date

scalar PhoneNumber

scalar JSONObject